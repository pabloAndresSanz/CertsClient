//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertsClient.CertServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.marsh.com.ar/CertService", ConfigurationName="CertServer.ICertService")]
    public interface ICertService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoMercosur", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoMercosurRespo" +
            "nse")]
        byte[] GetCertificadoMercosur(string patente, string chasis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoMercosur", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoMercosurRespo" +
            "nse")]
        System.Threading.Tasks.Task<byte[]> GetCertificadoMercosurAsync(string patente, string chasis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoLocal", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoLocalResponse" +
            "")]
        byte[] GetCertificadoLocal(string patente, string chasis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoLocal", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoLocalResponse" +
            "")]
        System.Threading.Tasks.Task<byte[]> GetCertificadoLocalAsync(string patente, string chasis);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICertServiceChannel : CertsClient.CertServer.ICertService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CertServiceClient : System.ServiceModel.ClientBase<CertsClient.CertServer.ICertService>, CertsClient.CertServer.ICertService {
        
        public CertServiceClient() {
        }
        
        public CertServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetCertificadoMercosur(string patente, string chasis) {
            return base.Channel.GetCertificadoMercosur(patente, chasis);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCertificadoMercosurAsync(string patente, string chasis) {
            return base.Channel.GetCertificadoMercosurAsync(patente, chasis);
        }
        
        public byte[] GetCertificadoLocal(string patente, string chasis) {
            return base.Channel.GetCertificadoLocal(patente, chasis);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCertificadoLocalAsync(string patente, string chasis) {
            return base.Channel.GetCertificadoLocalAsync(patente, chasis);
        }
    }
}
