//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertsClient.CertServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Certificado", Namespace="http://schemas.datacontract.org/2004/07/CertService")]
    [System.SerializableAttribute()]
    public partial class Certificado : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] archivoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tipoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] archivo {
            get {
                return this.archivoField;
            }
            set {
                if ((object.ReferenceEquals(this.archivoField, value) != true)) {
                    this.archivoField = value;
                    this.RaisePropertyChanged("archivo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tipo {
            get {
                return this.tipoField;
            }
            set {
                if ((object.ReferenceEquals(this.tipoField, value) != true)) {
                    this.tipoField = value;
                    this.RaisePropertyChanged("tipo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.marsh.com.ar/CertService", ConfigurationName="CertServer.ICertService")]
    public interface ICertService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificado", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoResponse")]
        CertsClient.CertServer.Certificado[] GetCertificado(string[] tipos, string patente, string chasis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.marsh.com.ar/CertService/ICertService/GetCertificado", ReplyAction="http://services.marsh.com.ar/CertService/ICertService/GetCertificadoResponse")]
        System.Threading.Tasks.Task<CertsClient.CertServer.Certificado[]> GetCertificadoAsync(string[] tipos, string patente, string chasis);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICertServiceChannel : CertsClient.CertServer.ICertService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CertServiceClient : System.ServiceModel.ClientBase<CertsClient.CertServer.ICertService>, CertsClient.CertServer.ICertService {
        
        public CertServiceClient() {
        }
        
        public CertServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CertsClient.CertServer.Certificado[] GetCertificado(string[] tipos, string patente, string chasis) {
            return base.Channel.GetCertificado(tipos, patente, chasis);
        }
        
        public System.Threading.Tasks.Task<CertsClient.CertServer.Certificado[]> GetCertificadoAsync(string[] tipos, string patente, string chasis) {
            return base.Channel.GetCertificadoAsync(tipos, patente, chasis);
        }
    }
}
